pipeline {
    agent any
    environment {
        ECR_REGISTRY = '638151711596.dkr.ecr.ap-south-1.amazonaws.com'
        APP_REPO_NAME = 'flask-app'
        PATH = "/usr/local/bin/:${env.PATH}"
    }
    stages {
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t "$ECR_REGISTRY/$APP_REPO_NAME:latest" .'
                sh 'docker image ls'
            }
        }
        stage('Push Image to ECR Repo') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                    credentialsId: 'aws-credentials'
                ]]) {
                sh 'aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:latest"'
                }            
                    
            }
        }
        stage('Deploy on Docker Machine') {
            steps {
                // sh 'aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
                sh 'docker pull "$ECR_REGISTRY/$APP_REPO_NAME:latest"'
                // sh 'docker rm -f flask-app | echo "there is no docker container named todo"'
                // sh 'docker run --name flask-app -dp 3000:3000 "$ECR_REGISTRY/$APP_REPO_NAME:latest"'
                sh 'docker service rm flask-app | echo "there is no service named flask-app"'
                sh 'docker service create --name flask-app -p 3000:3000 --replicas 1 $ECR_REGISTRY/$APP_REPO_NAME:latest'
            }
        }
        
    }
}
